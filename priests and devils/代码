//BaseCode.cs
using UnityEngine;  
using System.Collections;  
using Com.Mygame;  

namespace Com.Mygame {  
	public enum State { BSTART, BSEMOVING, BESMOVING, BEND, WIN, LOSE };  

	public interface IUserActions {  
		void priestSOnB();  
		void priestEOnB();  
		void devilSOnB();  
		void devilEOnB();  
		void moveBoat();  
		void offBoatL();  
		void offBoatR();  
		void restart();  
	}  

	public class GameSceneController: System.Object, IUserActions {  

		private static GameSceneController _instance;  
		private BaseCode _base_code;  
		private GenGameObject _gen_game_obj;  
		public State state = State.BSTART;  

		public static GameSceneController GetInstance() {  
			if (null == _instance) {  
				_instance = new GameSceneController();  
			}  
			return _instance;  
		}  

		public BaseCode getBaseCode() {  
			return _base_code;  
		}  

		internal void setBaseCode(BaseCode bc) {  
			if (null == _base_code) {  
				_base_code = bc;  
			}  
		}  

		public GenGameObject getGenGameObject() {  
			return _gen_game_obj;  
		}  

		internal void setGenGameObject(GenGameObject ggo) {  
			if (null == _gen_game_obj) {  
				_gen_game_obj = ggo;  
			}  
		}  

		public void priestSOnB() {  
			_gen_game_obj.priestStartOnBoat();  
		}  

		public void priestEOnB() {  
			_gen_game_obj.priestEndOnBoat();  
		}  

		public void devilSOnB() {  
			_gen_game_obj.devilStartOnBoat();  
		}  

		public void devilEOnB() {  
			_gen_game_obj.devilEndOnBoat();  
		}  

		public void moveBoat() {  
			_gen_game_obj.moveBoat();  
		}  

		public void offBoatL() {  
			_gen_game_obj.getOffTheBoat(0);  
		}  

		public void offBoatR() {  
			_gen_game_obj.getOffTheBoat(1);  
		}  

		public void restart() {  
			Application.LoadLevel(Application.loadedLevelName);  
			state = State.BSTART;  
		}  
	}  
}  

public class BaseCode : MonoBehaviour {  

	public string gameName;  
	public string gameRule;  

	void Start () {  
		GameSceneController my = GameSceneController.GetInstance();  
		my.setBaseCode(this);  
		gameName = "Priests and Devils";  
		gameRule = "Priests and Devils is a puzzle game in which you will help the Priests and Devils to cross the river within the time limit. There are 3 priests and 3 devils at one side of the river. They all want to get to the other side of this river, but there is only one boat and this boat can only carry two persons each time. And there must be one person steering the boat from one side to the other side. In the flash game, you can click on them to move them and click the go button to move the boat to the other direction. If the priests are out numbered by the devils on either side of the river, they get killed and the game is over. You can try it in many ways. Keep all priests alive! Good luck!             Sphere -- Priest    Cube -- Devil";  
	}  
}



//GenGameObject.cs
using System.Collections;  
using System.Collections.Generic;  
using Com.Mygame;  

public class GenGameObject : MonoBehaviour {  

	Stack<GameObject> priests_start = new Stack<GameObject>();  
	Stack<GameObject> priests_end = new Stack<GameObject>();  
	Stack<GameObject> devils_start = new Stack<GameObject>();  
	Stack<GameObject> devils_end = new Stack<GameObject>();  

	GameObject[] boat = new GameObject[2];  
	GameObject boat_obj;  
	public float speed = 100f;  

	GameSceneController my;  

	Vector3 shoreStartPos = new Vector3(0, 0, -12);  
	Vector3 shoreEndPos = new Vector3(0, 0, 12);  
	Vector3 boatStartPos = new Vector3(0, 0, -4);  
	Vector3 boatEndPos = new Vector3(0, 0, 4);  

	float gap = 1.5f;  
	Vector3 priestStartPos = new Vector3(0, 2.7f, -11f);  
	Vector3 priestEndPos = new Vector3(0, 2.7f, 8f);  
	Vector3 devilStartPos = new Vector3(0, 2.7f, -16f);  
	Vector3 devilEndPos = new Vector3(0, 2.7f, 13f);  


	void Start () {  
		my = GameSceneController.GetInstance();  
		my.setGenGameObject(this);  
		loadSrc();  
	}  

	void loadSrc() {  
		// shore  
		Instantiate(Resources.Load("Prefabs/Shore"), shoreStartPos, Quaternion.identity);  
		Instantiate(Resources.Load("Prefabs/Shore"), shoreEndPos, Quaternion.identity);  
		// boat  
		boat_obj = Instantiate(Resources.Load("Prefabs/Boat"), boatStartPos, Quaternion.identity) as GameObject;  
		// priests & devils  
		for (int i = 0; i < 3; ++i) {  
			priests_start.Push(Instantiate(Resources.Load("Prefabs/Priest")) as GameObject);  
			devils_start.Push(Instantiate(Resources.Load("Prefabs/Devil")) as GameObject);  
		}  
		// light  
		Instantiate(Resources.Load("Prefabs/Light"));  
	}  

	int boatCapacity() {  
		int capacity = 0;  
		for (int i = 0; i < 2; ++i) {  
			if (boat[i] == null) capacity++;  
		}  
		return capacity;  
	}  

	void getOnTheBoat(GameObject obj) {  
		if (boatCapacity() != 0) {  
			obj.transform.parent = boat_obj.transform;  
			if (boat[0] == null) {  
				boat[0] = obj;  
				obj.transform.localPosition = new Vector3(0, 1.2f, -0.3f);  
			} else {  
				boat[1] = obj;  
				obj.transform.localPosition = new Vector3(0, 1.2f, 0.3f);  
			}  
		}  
	}  

	public void moveBoat() {  
		if (boatCapacity() != 2) {  
			if (my.state == State.BSTART) {  
				my.state = State.BSEMOVING;  
			}  
			else if (my.state == State.BEND) {  
				my.state = State.BESMOVING;  
			}  
		}  
	}  

	public void getOffTheBoat(int side) {  
		if (boat[side] != null) {  
			boat[side].transform.parent = null;  
			if (my.state == State.BEND) {  
				if (boat[side].tag == "Priest") {  
					priests_end.Push(boat[side]);  
				}  
				else if (boat[side].tag == "Devil") {  
					devils_end.Push(boat[side]);  
				}  
			}  
			else if (my.state == State.BSTART) {  
				if (boat[side].tag == "Priest") {  
					priests_start.Push(boat[side]);  
				}  
				else if (boat[side].tag == "Devil") {  
					devils_start.Push(boat[side]);  
				}  
			}  
			boat[side] = null;  
		}  
	}  

	public void priestStartOnBoat() {  
		if (priests_start.Count != 0 && boatCapacity() != 0 && my.state == State.BSTART)  
			getOnTheBoat(priests_start.Pop());  
	}  

	public void priestEndOnBoat() {  
		if (priests_end.Count != 0 && boatCapacity() != 0 && my.state == State.BEND)  
			getOnTheBoat(priests_end.Pop());  
	}  

	public void devilStartOnBoat() {  
		if (devils_start.Count != 0 && boatCapacity() != 0 && my.state == State.BSTART)  
			getOnTheBoat(devils_start.Pop());  
	}  

	public void devilEndOnBoat() {  
		if (devils_end.Count != 0 && boatCapacity() != 0 && my.state == State.BEND)  
			getOnTheBoat(devils_end.Pop());  
	}  

	void setCharacterPositions(Stack<GameObject> stack, Vector3 pos) {  
		GameObject[] array = stack.ToArray();  
		for (int i = 0; i < stack.Count; ++i) {  
			array[i].transform.position = new Vector3(pos.x, pos.y, pos.z + gap*i);  
		}  
	}  

	void check() {  
		int pOnb = 0, dOnb = 0;  
		int priests_s = 0, devils_s = 0, priests_e = 0, devils_e = 0;  

		if (priests_end.Count == 3 && devils_end.Count == 3) {  
			my.state = State.WIN;  
			return;  
		}  

		for (int i = 0; i < 2; ++i) {  
			if (boat[i] != null && boat[i].tag == "Priest") pOnb++;  
			else if (boat[i] != null && boat[i].tag == "Devil") dOnb++;  
		}  
		if (my.state == State.BSTART) {  
			priests_s = priests_start.Count + pOnb;  
			devils_s = devils_start.Count + dOnb;  
			priests_e = priests_end.Count;  
			devils_e = devils_end.Count;  
		}  
		else if (my.state == State.BEND) {  
			priests_s = priests_start.Count;  
			devils_s = devils_start.Count;  
			priests_e = priests_end.Count + pOnb;  
			devils_e = devils_end.Count + dOnb;  
		}  
		if ((priests_s != 0 && priests_s < devils_s) || (priests_e != 0 && priests_e < devils_e)) {  
			my.state = State.LOSE;  
		}  
	}  

	void Update() {  
		setCharacterPositions(priests_start, priestStartPos);  
		setCharacterPositions(priests_end, priestEndPos);  
		setCharacterPositions(devils_start, devilStartPos);  
		setCharacterPositions(devils_end, devilEndPos);  

		if (my.state == State.BSEMOVING) {  
			boat_obj.transform.position = Vector3.MoveTowards(boat_obj.transform.position, boatEndPos, speed*Time.deltaTime);  
			if (boat_obj.transform.position == boatEndPos) {  
				my.state = State.BEND;  
			}  
		}  
		else if (my.state == State.BESMOVING) {  
			boat_obj.transform.position = Vector3.MoveTowards(boat_obj.transform.position, boatStartPos, speed*Time.deltaTime);  
			if (boat_obj.transform.position == boatStartPos) {  
				my.state = State.BSTART;  
			}  
		}  
		else check();  
	}  
}



//UserInterface.cs
using UnityEngine;  
using System.Collections;  
using Com.Mygame;  

public class UserInterface : MonoBehaviour {  

	GameSceneController my;  
	IUserActions action;  

	float width, height;  

	float castw(float scale) {  
		return (Screen.width - width) / scale;  
	}  

	float casth(float scale) {  
		return (Screen.height - height) / scale;  
	}  

	void Start() {  
		my = GameSceneController.GetInstance();  
		action = GameSceneController.GetInstance() as IUserActions;  
	}  

	void OnGUI() {  
		width = Screen.width / 12;  
		height = Screen.height / 12;  
		print (my.state);  
		if (my.state == State.WIN) {  
			if (GUI.Button(new Rect(castw(2f), casth(6f), width, height), "Win!")) {  
				action.restart();  
			}  
		}  
		else if (my.state == State.LOSE) {  
			if (GUI.Button(new Rect(castw(2f), casth(6f), width, height), "Lose!")) {  
				action.restart();  
			}  
		}  
		else {  
			if (GUI.RepeatButton(new Rect(10, 10, 120, 20), my.getBaseCode().gameName)) {  
				GUI.TextArea(new Rect(10, 40, Screen.width - 20, Screen.height/2), my.getBaseCode().gameRule);  
			}  
			else if (my.state == State.BSTART || my.state == State.BEND) {  
				if (GUI.Button(new Rect(castw(2f), casth(6f), width, height), "Go")) {  
					action.moveBoat();  
				}  
				if (GUI.Button(new Rect(castw(10.5f), casth(4f), width, height), "On")) {  
					action.devilSOnB();  
				}  
				if (GUI.Button(new Rect(castw(4.3f), casth(4f), width, height), "On")) {  
					action.priestSOnB();  
				}  
				if (GUI.Button(new Rect(castw(1.1f), casth(4f), width, height), "On")) {  
					action.devilEOnB();  
				}  
				if (GUI.Button(new Rect(castw(1.3f), casth(4f), width, height), "On")) {  
					action.priestEOnB();  
				}  
				if (GUI.Button(new Rect(castw(2.5f), casth(1.3f), width, height), "Off")) {  
					action.offBoatL();  
				}  
				if (GUI.Button(new Rect(castw(1.7f), casth(1.3f), width, height), "Off")) {  
					action.offBoatR();  
				}  
			}  
		}  
	}  
}
